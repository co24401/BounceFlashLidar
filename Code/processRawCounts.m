function [dataCube, countMap, pkValMap, pkBinMap] = processRawCounts( ...
    filename, filedir, scanfile, savedata, savefigs, ...
    dwell, lead_buffer, trail_buffer, prf, num_bins)
% processRawCounts.m
% Connor Henley
% 2/23/2021
%
% Reads in .csv that contains individual photon count and marker pulse 
% information and generates a datacube in which counts are binned by 
% timing bin and pixel position.  Also generates images of 2D maps of 
% counts integrated over all timing bins (countMap), timing bins containing 
% the peak number of counts in each pixel (pkBinMap), and the number of 
% counts in that peak bin (pkValMap).  These 2D maps may be useful for
% calibration purposes or for quick inspection of the data before further
% processing is performed. 

% Inputs:
% filename = Name of .csv file.  Filename will also be given to any saved 
%   figures or .mat file (string)
% filedir = Directory containing .csv file.  MAT and FIG files will also 
%   be saved here (string)
% scanfile = File containing parameters of detector galvo scan used during
%   data collection under consideration (string)
% savedata = If True, save a .mat file containing outputs of this function
%   (bool)
% savefigs = If True, save figure generated by this function (bool)
% dwell = Per-pixel dwell time of scan being considered (seconds)
% prf = Pulsed laser PRF used for data collection (Hz)
% lead_buffer = Parameter for removing blur caused by galvo motion (seconds)
% trail_buffer = Parameter for removing blur caused by galvo motion (seconds)
% prf = Laser pulse repetition frequency (Hz)
% num_bins = Number of timing bins in each pixel histogram

% Outputs:
% dataCube = Counts binned by pixel and timing position
% countMap = Counts integrated over all timing bins for each pixel
% pkValMap = Number of counts in that peak bin for each pixel
% pkBinMap = Timing bin containing the peak number of counts in each pixel

%% Load data

countData = load([filedir filename '.csv']);
disp('Count data read.')

markerInds = find(countData(:, 1) == 1);

%Image dimensions
load(scanfile, 'num_u', 'num_v', 'u_lims', 'v_lims')

% Remove spurious marker records (source of these is unknown)
jj = 2;
while jj <= length(markerInds)
    if abs(countData(markerInds(jj),4) - countData(markerInds(jj-1),4) - dwell*prf) > 100
        markerInds(jj) = [];
    else
        jj = jj + 1;
    end
end

% Number of timing bins in each pixel histogram
min_bin = 0;
max_bin = num_bins - 1;

%% Construct count map and peak bin map

countMap = zeros(size(markerInds, 1)-1, 1);
pkBinMap = zeros(size(markerInds, 1)-1, 1);
pkValMap = zeros(size(markerInds, 1)-1, 1);
dataCube = zeros(size(markerInds, 1)-1, num_bins);

for ii = 2:size(markerInds, 1)
    counts = countData((markerInds(ii-1)+1):(markerInds(ii)-1), :);  % sum counts between marker entries
    if (size(counts, 1) ~= 0)
        firstCountPulse = counts(1, 4);  
        lastCountPulse = counts(end, 4);
        keepIndsLead = (lastCountPulse - counts(:, 4))/prf < (dwell - lead_buffer);
        keepIndsTrail = (counts(:, 4)-firstCountPulse)/prf < (dwell - trail_buffer);
        counts = counts((keepIndsTrail & keepIndsLead), :);  % Only keep rows of countData that don't fall within lead and trail buffer
    end

    dataCube(ii-1, :) = histcounts(counts(:, 6), (min_bin-0.5):(max_bin+0.5) );
    countMap(ii-1) = size(counts, 1);
    [pkBinMap(ii-1), pkValMap(ii-1)] = mode(counts(:, 6), 1);
end

% Flip every other row left-right
for ii = 1:num_v
    if rem(ii, 2) == 0
        flip_inds = (1:num_u) + (ii-1)*num_u;
        countMap(flip_inds) = flip(countMap(flip_inds), 1);
        pkBinMap(flip_inds) = flip(pkBinMap(flip_inds), 1);
        pkValMap(flip_inds) = flip(pkValMap(flip_inds), 1);
        dataCube(flip_inds, :) = flip(dataCube(flip_inds, :), 1);
    end
end

%% Plot and save data

uu = linspace(u_lims(2), u_lims(1), num_u);
vv = linspace(v_lims(1), v_lims(2), num_v);

generate_figure = true;

if generate_figure
    figure('Position', [70, 200, 1400, 300]); 
    
    % Count map plot
    subplot(1, 3, 1);
    imagesc(uu, vv, reshape(countMap, num_u, num_v)')
    set(gca, 'YDir', 'normal')
    set(gca, 'XDir', 'reverse')
    set(gca, 'ColorScale', 'log')
    colorbar;
    title('Counts')
    axis square
    
    % Peak bin value plot
    subplot(1, 3, 2);
    imagesc(uu, vv, reshape(pkValMap, num_u, num_v)')
    title('Peak Bin Value (counts)')
    set(gca, 'YDir', 'normal')
    set(gca, 'XDir', 'reverse')
    set(gca, 'ColorScale', 'log')
    colorbar;
    axis square
    
    % Peak bin plot
    subplot(1, 3, 3);
    imagesc(uu, vv, reshape(pkBinMap, num_u, num_v)')
    title('Peak Bin')
    set(gca, 'YDir', 'normal')
    set(gca, 'XDir', 'reverse')
    colorbar;
    axis square
    
    if savefigs
        saveas(gcf, [filedir filename '.fig'])
        saveas(gcf, [filedir filename '.png'])
    end

end

if savedata
    save([filedir filename], 'countMap', 'pkBinMap', 'pkValMap', ...
        'dataCube', '-v7.3')
end

end

